# lepta/grammar/templates/precedence_templates.py
from __future__ import annotations
from typing import Dict, List, Tuple


# 템플릿: 아래 순서(위→아래)가 레벨(낮음→높음)을 결정함.
TEMPLATES: Dict[str, List[Tuple[str, List[str]]]] = {
    "arithmetic_basic": [
        ("left",  ["+", "-"]),
        ("left",  ["*", "/"]),
        ("right", ["^"]),
        ("right", ["UMINUS", "UPLUS"]),  # 가상 단항 연산자
    ],
    "c_like": [
        ("nonassoc", ["==", "!=", "<", "<=", ">", ">="]),
        ("left",     ["|"]),
        ("left",     ["^"]),
        ("left",     ["&"]),
        ("left",     ["<<", ">>"]),
        ("left",     ["+", "-"]),
        ("left",     ["*", "/", "%"]),
        ("right",    ["UMINUS", "UPLUS", "~", "!"]),
    ],
    "python_expr_core": [
        ("left",  ["or"]),
        ("left",  ["and"]),
        ("right", ["not"]),
        ("nonassoc", ["in", "not in", "is", "is not", "<", "<=", ">", ">=", "==", "!="]),
        ("left",  ["|"]),
        ("left",  ["^"]),
        ("left",  ["&"]),
        ("left",  ["<<", ">>"]),
        ("left",  ["+", "-"]),
        ("left",  ["*", "@", "/", "//", "%"]),
        ("right", ["UMINUS", "UPLUS", "~"]),
        ("right", ["**"]),
    ],
    "javascript_core": [
        ("right",    ["=", "+=", "-=", "*=", "/=", "%=", "<<=", ">>=", ">>>=", "|=", "^=", "&="]),  # 보통 별도 비표현식 문법에서 처리
        ("left",     ["||"]),
        ("left",     ["??"]),             # nullish coalescing
        ("left",     ["&&"]),
        ("nonassoc", ["==", "===", "!=", "!=="]),
        ("nonassoc", ["<", "<=", ">", ">="]),
        ("left",     ["|"]),
        ("left",     ["^"]),
        ("left",     ["&"]),
        ("left",     ["<<", ">>", ">>>"]),
        ("left",     ["+", "-"]),
        ("left",     ["*", "/", "%"]),
        ("right",    ["UMINUS", "UPLUS", "~", "!"]),  # 단항
        ("right",    ["**"]),                          # 지수 (오른쪽 결합, 단항보다 더 높음)
    ],

    # Java / C# 유사(지수 연산 없음). C#의 ?? 포함
    "java_core": [
        ("right",    ["=", "+=", "-=", "*=", "/=", "%=", "<<=", ">>=", "&=", "^=", "|="]),
        ("left",     ["||"]),
        ("left",     ["&&"]),
        ("left",     ["|"]),
        ("left",     ["^"]),
        ("left",     ["&"]),
        ("nonassoc", ["==", "!="]),
        ("nonassoc", ["<", "<=", ">", ">="]),
        ("left",     ["<<", ">>"]),       # Java에선 >>> 도 있음(부호 없는 시프트)
        ("left",     ["+", "-"]),
        ("left",     ["*", "/", "%"]),
        ("right",    ["UMINUS", "UPLUS", "~", "!"]),
    ],

    # C# 전용(?? 포함, ?:는 문법에서 처리 권장)
    "csharp_core": [
        ("right",    ["=", "+=", "-=", "*=", "/=", "%=", "<<=", ">>=", "&=", "^=", "|="]),
        ("left",     ["||"]),
        ("left",     ["&&"]),
        ("left",     ["|"]),
        ("left",     ["^"]),
        ("left",     ["&"]),
        ("nonassoc", ["==", "!="]),
        ("nonassoc", ["<", "<=", ">", ">="]),
        ("left",     ["<<", ">>"]),
        ("left",     ["+", "-"]),
        ("left",     ["*", "/", "%"]),
        ("left",     ["??"]),             # null-coalescing
        ("right",    ["UMINUS", "UPLUS", "~", "!"]),
    ],

    # C++ 핵심(지수 없음, 비트/시프트/논리)
    "cpp_core": [
        ("right",    ["=", "+=", "-=", "*=", "/=", "%=", "<<=", ">>=", "&=", "^=", "|="]),
        ("left",     ["||"]),
        ("left",     ["&&"]),
        ("left",     ["|"]),
        ("left",     ["^"]),
        ("left",     ["&"]),
        ("nonassoc", ["==", "!="]),
        ("nonassoc", ["<", "<=", ">", ">="]),
        ("left",     ["<<", ">>"]),
        ("left",     ["+", "-"]),
        ("left",     ["*", "/", "%"]),
        ("right",    ["UMINUS", "UPLUS", "~", "!"]),
    ],

    # Rust (지수 없음, 논리/비교/비트/시프트/산술)
    # 주의: Rust는 'as'(캐스트), '?', '..' 등은 문법에서 별도 처리 권장
    "rust_core": [
        ("left",     ["||"]),
        ("left",     ["&&"]),
        ("nonassoc", ["==", "!=", "<", "<=", ">", ">="]),
        ("left",     ["|"]),
        ("left",     ["^"]),
        ("left",     ["&"]),
        ("left",     ["<<", ">>"]),
        ("left",     ["+", "-"]),
        ("left",     ["*", "/", "%"]),
        ("right",    ["UMINUS", "UPLUS", "!"]),
    ],

    # Go (정식 우선순위 반영: multiplicative > additive > 비교 > && > ||, 단항이 최상)
    # &^ (bit clear) 포함
    "go_core": [
        ("left",     ["||"]),
        ("left",     ["&&"]),
        ("nonassoc", ["==", "!=", "<", "<=", ">", ">="]),
        ("left",     ["+", "-", "|", "^"]),
        ("left",     ["*", "/", "%", "<<", ">>", "&", "&^"]),
        ("right",    ["UMINUS", "UPLUS", "!", "^", "*", "&"]),  # 단항 *, & 는 포인터/주소(필요 시 문법 분리)
    ],

    # Swift (지수 없음, nil-coalescing ??)
    "swift_core": [
        ("left",     ["||"]),             # Swift는 || 대신 '||' 아님 -> 실제 토큰은 '||' 형태 사용 가능(문법에 맞춰 수정)
        ("left",     ["&&"]),
        ("left",     ["??"]),             # nil coalescing
        ("nonassoc", ["==", "!=", "<", "<=", ">", ">="]),
        ("left",     ["|"]),
        ("left",     ["^"]),
        ("left",     ["&"]),
        ("left",     ["<<", ">>"]),
        ("left",     ["+", "-"]),
        ("left",     ["*", "/", "%"]),
        ("right",    ["UMINUS", "UPLUS", "!","~"]),
    ],

    # Kotlin (?:/?:/Elvis ?: 아님, Elvis는 ?: 이지만 삼항과 충돌 가능 → 문법에서 처리)
    "kotlin_core": [
        ("left",     ["||"]),
        ("left",     ["&&"]),
        ("left",     ["?:"]),             # Elvis(우선순위는 ||, && 보다 높고 비교보다 낮게 잡는 경우多 – 필요 시 조정)
        ("nonassoc", ["==", "!=", "===", "!==", "<", "<=", ">", ">="]),
        ("left",     ["|"]),
        ("left",     ["^"]),
        ("left",     ["&"]),
        ("left",     ["<<", ">>"]),
        ("left",     ["+", "-"]),
        ("left",     ["*", "/", "%"]),
        ("right",    ["UMINUS", "UPLUS", "!"]),
    ],

    # Lua 5.3+: or < and < 비교 < | < ~ < & < << >> < .. < + - < * / // % < ^ < 단항(not, #, - , ~)
    # 주의: '^'와 '..'는 오른쪽 결합
    "lua_core": [
        ("left",     ["or"]),
        ("left",     ["and"]),
        ("nonassoc", ["<", "<=", ">", ">=", "==", "~="]),
        ("left",     ["|"]),
        ("left",     ["~"]),              # bitwise XOR
        ("left",     ["&"]),
        ("left",     ["<<", ">>"]),
        ("right",    [".."]),             # concat (right)
        ("left",     ["+", "-"]),
        ("left",     ["*", "/", "//", "%"]),
        ("right",    ["^"]),              # exponent (right)
        ("right",    ["UMINUS", "UPLUS", "not", "#", "~"]),  # 단항: 음수, 부정, 길이, bitnot
    ],

    # Ruby: or < and < || < && < | < ^ < & < 비교 < << >> < + - < * / % < ** < 단항
    "ruby_core": [
        ("left",     ["or"]),
        ("left",     ["and"]),
        ("left",     ["||"]),
        ("left",     ["&&"]),
        ("left",     ["|"]),
        ("left",     ["^"]),
        ("left",     ["&"]),
        ("nonassoc", ["<", "<=", ">", ">=", "==", "===", "!=", "!~", "=~"]),
        ("left",     ["<<", ">>"]),
        ("left",     ["+", "-"]),
        ("left",     ["*", "/", "%"]),
        ("right",    ["**"]),             # exponent
        ("right",    ["UMINUS", "UPLUS", "!", "~"]),
    ],

    # SQL(일반적인 방언 공통분모) – 실제 방언별 연산자 차이는 문법에서 조정
    "sql_core": [
        ("left",     ["or"]),
        ("left",     ["and"]),
        ("right",    ["not"]),
        ("nonassoc", ["in", "not in", "is", "is not", "like", "ilike", "between",
                      "<", "<=", ">", ">=", "=", "<>", "!="]),
        ("left",     ["||"]),             # 문자열 연결
        ("left",     ["+", "-"]),
        ("left",     ["*", "/", "%"]),
        ("right",    ["UMINUS", "UPLUS"]),
    ],
}